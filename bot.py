import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

scheduler = AsyncIOScheduler()
user_data = {}

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_data[message.from_user.id] = {'checklist': False, 'report': False}
    await message.reply("–†–µ–∂–∏–º '–ì–∞—Ä—Ä—ñ' –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –¥—ñ—î—à —è–∫ —Ñ—ñ–∫—Å–µ—Ä.")

@dp.message_handler(commands=['status'])
async def status_cmd(message: types.Message):
    data = user_data.get(message.from_user.id, {})
    checklist_status = '‚úÖ' if data.get('checklist') else '‚ùå'
    report_status = '‚úÖ' if data.get('report') else '‚ùå'
    await message.reply(
        f"üìä –°—Ç–∞—Ç—É—Å –¥–Ω—è:
"
        f"- –†–∞–Ω–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {checklist_status}
"
        f"- –í–µ—á—ñ—Ä–Ω—ñ–π –∑–≤—ñ—Ç: {report_status}"
    )

@dp.message_handler(commands=['report'])
async def report_cmd(message: types.Message):
    user_data[message.from_user.id]['report'] = True
    await message.reply("üìì –í–µ—á—ñ—Ä–Ω—ñ–π –∑–≤—ñ—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∏–π –¥–µ–Ω—å.")

@dp.message_handler(commands=['shadow_mode'])
async def shadow_mode_cmd(message: types.Message):
    await message.reply("üï∂ –†–µ–∂–∏–º –º–æ–≤—á–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ 6 –≥–æ–¥–∏–Ω. –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—ó.")

async def send_morning_message():
    for user_id in user_data:
        await bot.send_message(user_id, "üï∂ –ü–æ—á–∏–Ω–∞–π –¥–µ–Ω—å, –ì–∞—Ä—Ä—ñ. –ü—Ä–æ–π–¥–∏ –±–∞–∑–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É:
- –•–æ–ª–æ–¥–Ω–∞ –≤–æ–¥–∞
- –†–æ–∑–º–∏–Ω–∫–∞
- –¢–∏—à–∞ 2 —Ö–≤
- 1 —Ä–µ—á–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ—ó–∫—ñ–≤")

async def on_startup(_):
    scheduler.add_job(send_morning_message, 'cron', hour=6, minute=0)
    scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
